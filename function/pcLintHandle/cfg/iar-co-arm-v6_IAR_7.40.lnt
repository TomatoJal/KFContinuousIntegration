//    iar-co-arm-v6.lnt
//    IAR ARM v6 compiler settings.
E:\OnePiece\Project\0007.KFM\KFContinuousIntegration\PCLint\cfg\std_st_arm_misra.lnt
E:\OnePiece\Project\0007.KFM\KFContinuousIntegration\PCLint\cfg\env-si.lnt
E:\OnePiece\Project\0007.KFM\KFContinuousIntegration\PCLint\cfg\options.lnt

//  MODIFY to point to your IAR Embedded Workbench installation
-i"D:\Work\IAR\arm\inc\c"
-i"D:\Work\IAR\arm\inc"
-i"D:\Work\IAR\arm\CMSIS\Include"
+libdir("D:\Work\IAR\arm\inc\c")
+libdir("D:\Work\IAR\arm\inc")
+libdir("D:\Work\IAR\arm\CMSIS\Include")



// MODIFY and ADD your project include paths here

// 
//    EWARM Size of Scalars
// 
-si4
-sl4
-sp4
-sf4
-sd8

//+fnc
+fpc
-fat
+fie


// 
//    EWARM extended keywords
// 
-d__absolute=       // Makes references to the object use absolute addressing
-d__arm=            // Makes a function execute in ARM mode
-d__big_endian=     // Declares a variable to use the big-endian byte order
-d__fiq=            // Declares a fast interrupt function
-d__interwork=      // Declares a function to be callable from both ARM and Thumb mode
-d__irq=            // Declares an interrupt function
-d__little_endian=	// Declares a variable to use the little-endian byte order
-d__nested=         // Allows an __irq declared interrupt function to be nested, that is, interruptible by the same type of interrupt
-d__pcrel=          // Used internally by the compiler for constant data when the --ropi compiler option is used
-d__ramfunc=        // Makes a function execute in RAM
-d__stackless=      // Makes a function callable without a working stack
-d__swi=            // Declares a software interrupt function
-d__thumb=          // Makes a function execute in Thumb mode
-d__weak=           // Declares a symbol to be externally weakly linked
-d__packed=
-d__INTADDR__=(uint32)
//-d__INTADDR__=GetAddr
-d__noreturn=
-d__root=
-d__no_operation()=

-d_NO_DEFINITIONS_IN_HEADER_FILES=
-d_HAS_GENERIC_TEMPLATES=0
-d_DLIB_ADD_C99_SYMBOLS=0

// This symbol determines properties for class objects.
-d__construction_by_bitwise_copy_allowed(x)=true

// This symbol determines properties for class objects.
-d__assignment_by_bitwise_copy_allowed(x)=true

// These symbols determine properties for class objects and they function like the
// sizeof operator. The symbols are true when a class, base class, or member
// (recursively) has a user-defined constructor or destructor, respectively.
-d__has_destructor(x)=true
-d__has_constructor(x)=true

// These symbols are used as memory attributes internally by the compiler, and they
// might have to be used as arguments in certain templates.
-d__code
-d__data

// Determines the allowed range for a parameter to an intrinsic function and that the
// parameter must be of type const.
-d__constrange(x,y)=const

// Determines the class memory. A class memory determines which memory a class
// object can reside
-d__memory_of(x)=true


// MODIFY
// for problems with internal compiler library files: ichooser, iutility and xmemory...etc..
// ------------------------------------------------------------------------------------------
-elib(19)           // Usually about stray semicolons
-elib(1076)         // Anonymous union assumed to be 'static'"
-elibsym(1512)      // Base class destructor is non-virtual
-elib(46)           // For bitfields with non-int fields
//-e413
//-e923
-e925
//-e926
//-e927
//-e928
//-e929


// 
//    EWARM extended defines
// 

-i"D:\Work\lint\cfg\"
-header(iar-predefined_macros_for_PC-lint_IAR_7.40.h)

//  ***************************************************************************
//  
//  IAR Systems
//  
//  File name:  iar-co-arm-v6.lnt
//  
//  Revision:   0.3 (alpha)
//  
//  Modified:   2011-11-03
//  
//  ***************************************************************************
